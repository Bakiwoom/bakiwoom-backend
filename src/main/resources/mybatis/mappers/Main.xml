<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="main">

	<!-- 맞춤 공고 조회 -->
    <select id="getRecommendedJobs" parameterType="int" resultType="JobPostingVo">
        SELECT jp.job_id AS jobId,
		       jp.company_id AS companyId,
		       u.name AS userName,
		       jp.title,
		       jp.location,
		       jp.experience_level AS experienceLevel,
		       jp.deadline,
		       jp.bookmark_count AS bookmarkCount,
		       c.name AS companyName,
		       c.logo AS companyLogo,
		       dt.disability_name AS disabilityTypeName
		FROM job_posting jp
		JOIN company c ON jp.company_id = c.company_id
		LEFT JOIN disability_types dt ON jp.disability_type = dt.id
		LEFT JOIN user u ON u.user_id = 1  -- 특정 사용자를 조인 (여기서는 user_id = 1)
		WHERE jp.status = 'open'
		AND jp.deadline >= CURRENT_DATE
		AND (jp.disability_type IS NULL 
		     OR jp.disability_type = (SELECT disability_type_id FROM user WHERE user_id = #{value}))
		ORDER BY jp.created_at DESC
		LIMIT 4
    </select>
    
    <!-- 인기 공고 조회 -->
    <select id="getPopularJobs" resultType="JobPostingVo">
        SELECT jp.job_id AS jobId,
               jp.company_id AS companyId,
               jp.title,
               jp.location,
               jp.experience_level AS experienceLevel,
               jp.deadline,
               jp.bookmark_count AS bookmarkCount,
               c.name AS companyName,
               c.logo AS companyLogo,
               dt.disability_name AS disabilityTypeName,
               (jp.view_count * 0.3 + jp.apply_count * 0.5 + jp.bookmark_count * 0.2) AS popularityScore
        FROM job_posting jp
        JOIN company c ON jp.company_id = c.company_id
        LEFT JOIN disability_types dt ON jp.disability_type = dt.id
        WHERE jp.status = 'open'
        AND jp.deadline >= CURRENT_DATE
        ORDER BY popularityScore DESC
        LIMIT 4
    </select>
    
    <!-- 주목받는 공고 조회 -->
    <select id="getTrendingJobs" resultType="JobPostingVo">
        SELECT jp.job_id AS jobId,
               jp.company_id AS companyId,
               jp.title,
               jp.location,
               jp.experience_level AS experienceLevel,
               jp.deadline,
               jp.bookmark_count AS bookmarkCount,
               c.name AS companyName,
               c.logo AS companyLogo,
               dt.disability_name AS disabilityTypeName
        FROM job_posting jp
        JOIN company c ON jp.company_id = c.company_id
        LEFT JOIN disability_types dt ON jp.disability_type = dt.id
        WHERE jp.status = 'open'
        AND jp.deadline >= CURRENT_DATE
        AND jp.created_at >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY)
        ORDER BY jp.view_count DESC
        LIMIT 4
    </select>
    
    <!-- ========== 북마크 관련 쿼리 ========== -->
    
    <!-- 북마크 체크 -->
    <select id="checkBookmark" parameterType="BookmarkVo" resultType="int">
        SELECT COUNT(*)
        FROM bookmarks
        WHERE user_id = #{userId}
        AND job_id = #{jobId}
    </select>
    
    <!-- 북마크 추가 -->
    <insert id="addBookmark" parameterType="BookmarkVo">
        INSERT INTO bookmarks (user_id, job_id)
        VALUES (#{userId}, #{jobId})
    </insert>
    
    <!-- 북마크 삭제 -->
    <delete id="removeBookmark" parameterType="BookmarkVo">
        DELETE FROM bookmarks
        WHERE user_id = #{userId}
        AND job_id = #{jobId}
    </delete>
    
    <!-- 사용자의 북마크 목록 조회 -->
    <select id="getUserBookmarks" parameterType="int" resultType="BookmarkVo">
        SELECT bookmark_id AS bookmarkId,
               user_id AS userId,
               job_id AS jobId,
               created_at AS createdAt
        FROM bookmarks
        WHERE user_id = #{value}
        ORDER BY created_at DESC
    </select>
    
    <!-- ========== 카운트 업데이트 관련 쿼리 ========== -->
    
    <!-- 북마크 카운트 증가 -->
    <update id="increaseBookmarkCount" parameterType="int">
        UPDATE job_posting
        SET bookmark_count = bookmark_count + 1
        WHERE job_id = #{value}
    </update>
    
    <!-- 북마크 카운트 감소 -->
    <update id="decreaseBookmarkCount" parameterType="int">
        UPDATE job_posting
        SET bookmark_count = bookmark_count - 1
        WHERE job_id = #{value}
        AND bookmark_count > 0
    </update>

</mapper>